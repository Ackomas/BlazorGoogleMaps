@page "/projection"
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps

<h3>MapProjectionPage</h3>

<GoogleMap @ref="@_map1" Id="map1" Options="@_mapOptions" OnAfterInit="@OnAfterInitAsync">
</GoogleMap>
<button @onclick="GetProjection">Get projection</button>&nbsp;

<MapEventList @ref="@_eventList" Events="@_events"></MapEventList>
@code {
    private GoogleMap _map1;
    private MapEventList _eventList;
    private MapOptions _mapOptions;
    private readonly List<String> _events = new List<String>();

    protected override void OnInitialized()
    {
        _mapOptions = new MapOptions()
            {
                Zoom = 13,
                Center = new LatLngLiteral()
                {
                    Lat = 13.505892,
                    Lng = 100.8162
                },
                MapTypeId = MapTypeId.Roadmap
            };
    }

    private Task OnAfterInitAsync()
    {
       return Task.CompletedTask;
    }

    private async Task<LatLngLiteral> RelativePoint2LatLng(Projection projection, Point point)
    {

        var bounds = await _map1.InteropObject.GetBounds();

        var zoom = await _map1.InteropObject.GetZoom();

        var topRight = await projection.FromLatLngToPoint(new LatLngLiteral(bounds.East, bounds.North));

        var bottomLeft = await projection.FromLatLngToPoint(new LatLngLiteral(bounds.West, bounds.South));

        var scale = Math.Pow(2, zoom);

        var worldPoint = new Point { X = point.X / scale + bottomLeft.X, Y = point.Y / scale + topRight.Y };

        var latLng = await projection.FromPointToLatLng(worldPoint);

        return latLng;

    }

    private async Task<Point> LatLng2RelativePoint(Projection projection, LatLngLiteral latLng)

    {

        var bounds = await _map1.InteropObject.GetBounds();

        var zoom = await _map1.InteropObject.GetZoom();

        var topRight = await projection.FromLatLngToPoint(new LatLngLiteral(bounds.East, bounds.North));

        var bottomLeft = await projection.FromLatLngToPoint(new LatLngLiteral(bounds.West, bounds.South));

        var scale = Math.Pow(2, zoom);

        var worldPoint = await projection.FromLatLngToPoint(latLng);

        var point = new Point { X = (worldPoint.X - bottomLeft.X) * scale, Y = (worldPoint.Y - topRight.Y) * scale };

        return point;

    }

    private async Task GetProjection()
    {
        var center = await _map1.InteropObject.GetCenter();
        using var projection = await _map1.InteropObject.GetProjection();
        var point = await projection.FromLatLngToPoint(center);
        if (point != null)
        {
            var msg = $"x: {point.X} y: {point.Y}";
            _events.Add(msg);
            var ltg = await projection.FromPointToLatLng(point);
            msg = $"Lng: {ltg.Lng} Lat: {ltg.Lat}";
            _events.Add(msg);
        }
    }
}
