@page "/map-data"
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using System.Diagnostics
@using GoogleMapsComponents.Maps.Data
@*
    The code for this sample was taken from below on 09/02/2020:
    https://developers.google.com/maps/documentation/javascript/earthquakes#maps_earthquake_circles-typescript
*@

<h1>Map Data</h1>

<GoogleMap @ref="@(this._map1)" Id="map1" Options="@(this._mapOptions)" OnAfterInit="async () => await OnAfterMapInit()"></GoogleMap>
<button @onclick="@GetMapData">Get MapData </button>

<div>
    <p style="font-weight: bold; font-size: 1.2em">@this._message</p>
</div>

@functions {
    private GoogleMap _map1;
    private MapOptions _mapOptions;
    private string _message = "";

    protected override void OnInitialized()
    {
        this._mapOptions = new MapOptions
        {
            Zoom = 13,
            Center = new LatLngLiteral
            {
                Lat = -33.8688,
                Lng = 151.2195
            },
            MapTypeId = MapTypeId.Roadmap
        };
    }

    private async Task OnAfterMapInit()
    {

    }

    private async Task GetMapData()
    {
        var jsonData = "{ \"type\": \"FeatureCollection\"," +
                       "  \"features\": [" +
                       "{ \"type\": \"Feature\"," +
                       " \"properties\": { \"stroke\": \"#555555\", \"stroke-width\": 2, \"stroke-opacity\": 1 }, " +
                       " \"geometry\": {\"type\": \"LineString\",  \"coordinates\": [ [ 151.219, -33.869], [151.23, -33.88]]}}]}";
        
        var rootFeature = new Feature();
        var childFeature = new Feature();
        childFeature.Properties = new Dictionary<string, object>[]
        {
            new Dictionary<string, object>()
            {
                {"type", "Feature"},
                {"properties", 
                    new Dictionary<string, object>()
                    {
                        {"stroke", "#555555"},
                        {"stroke-width", 2},
                        {"stroke-opacity", 1},
                    }
                },
                {"geometry",
                    new Dictionary<string, object>()
                    {
                        {"type", "LineString"},
                        {"coordinates", new  double[][]
                        {
                            new double []{ 151.219, -33.869},
                            new double []{ 151.23, -33.88},
                        }
                        },
                    }
                },
            }
        };

        rootFeature.Properties = new Dictionary<string, object>[]
        {
            new Dictionary<string, object>()
            {
                {"type", "FeatureCollection"},
                {"features", childFeature.Properties},
            }
        };

        await _map1.InteropObject.Data.AddGeoJson(jsonData);
    }
}

